pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-2'
        AWS_ACCOUNT_ID = '020951019497'
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        K8S_CLUSTER = 'ecommerce-microservices-cluster'
        K8S_NAMESPACE = 'dev'
        IMAGE_TAG = 'latest'
        ALL_SERVICES = 'service-discovery,cloud-config,user-service,product-service,order-service,payment-service,shipping-service,favourite-service,api-gateway'
    }

    stages {
        stage('Configure kubectl') {
            steps {
                sh """
                    aws eks update-kubeconfig --region ${AWS_REGION} --name ${K8S_CLUSTER}
                    kubectl config set-context --current --namespace=${K8S_NAMESPACE}
                """
            }
        }

        stage('Create Namespace') {
            steps {
                sh """
                    kubectl get namespace ${K8S_NAMESPACE} || kubectl create namespace ${K8S_NAMESPACE}
                """
            }
        }

        stage('Clean Old Pods') {
            steps {
                script {
                    echo "Scaling down old ReplicaSets to free memory for new deployments..."
                    def services = env.ALL_SERVICES.split(',')
                    services.each { service ->
                        sh """
                            # Get old replicasets (not the latest one)
                            OLD_RS=\$(kubectl get rs -n ${K8S_NAMESPACE} -l app=${service} --sort-by=.metadata.creationTimestamp -o name | head -n -1)

                            if [ ! -z "\$OLD_RS" ]; then
                                echo "Scaling down old ReplicaSets for ${service}..."
                                for rs in \$OLD_RS; do
                                    kubectl scale \$rs -n ${K8S_NAMESPACE} --replicas=0 || true
                                done
                            fi
                        """
                    }
                    echo "Old pods cleanup completed"
                }
            }
        }

        stage('Deploy Services') {
            steps {
                script {
                    // Sequential deployment order - always deploy all services
                    def deploymentOrder = [
                        'service-discovery',
                        'cloud-config',
                        'user-service',
                        'product-service',
                        'order-service',
                        'favourite-service',
                        'payment-service',
                        'shipping-service',
                        'api-gateway'
                    ]

                    deploymentOrder.each { service ->
                        echo "Deploying ${service}..."

                        sh """
                            kubectl apply -f infrastructure/kubernetes/base/${service}.yaml -n ${K8S_NAMESPACE} || true
                            kubectl set image deployment/${service} ${service}=${ECR_REGISTRY}/ecommerce/${service}:${IMAGE_TAG} -n ${K8S_NAMESPACE} || true
                            kubectl rollout restart deployment/${service} -n ${K8S_NAMESPACE} || true
                            kubectl rollout status deployment/${service} -n ${K8S_NAMESPACE} --timeout=5m || true
                        """

                        // Wait for critical services
                        if (service == 'service-discovery') {
                            echo "Waiting 30s for Eureka to be fully ready..."
                            sleep 30
                        }
                        if (service == 'cloud-config') {
                            echo "Waiting 20s for Config Server to be fully ready..."
                            sleep 20
                        }
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                sh """
                    echo "=== Pods Status ==="
                    kubectl get pods -n ${K8S_NAMESPACE}
                    echo ""
                    echo "=== Services ==="
                    kubectl get svc -n ${K8S_NAMESPACE}
                """
            }
        }

        stage('E2E Tests') {
            steps {
                script {
                    def gatewayUrl = sh(
                        script: "kubectl get svc api-gateway -n ${K8S_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo 'localhost'",
                        returnStdout: true
                    ).trim()

                    if (gatewayUrl && gatewayUrl != 'localhost') {
                        echo "Running E2E tests against: http://${gatewayUrl}"

                        def services = env.ALL_SERVICES.split(',')
                        services.each { service ->
                            if (service != 'service-discovery' && service != 'cloud-config' && service != 'api-gateway') {
                                sh """
                                    mvn verify -pl ${service} -Pe2e-tests \\
                                        -Dtest.base.url=http://${gatewayUrl} \\
                                        -Dtest.timeout=30000 || echo "E2E tests not configured for ${service}"
                                """
                            }
                        }
                    } else {
                        echo "API Gateway not accessible externally, skipping E2E tests"
                    }
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: '**/target/failsafe-reports/*.xml'
                }
            }
        }

        stage('Performance Tests') {
            steps {
                script {
                    def gatewayUrl = sh(
                        script: "kubectl get svc api-gateway -n ${K8S_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo ''",
                        returnStdout: true
                    ).trim()

                    if (gatewayUrl) {
                        sh """
                            cd tests/performance
                            python3 -m pip install locust --quiet || true
                            locust -f locustfile.py --host=http://${gatewayUrl} \\
                                   --users 10 --spawn-rate 2 --run-time 60s --headless \\
                                   --html reports/performance_report.html || echo "Performance tests failed or not configured"
                        """
                    } else {
                        echo "API Gateway not accessible, skipping performance tests"
                    }
                }
            }
            post {
                always {
                    publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'tests/performance/reports',
                        reportFiles: 'performance_report.html',
                        reportName: 'Performance Test Reports'
                    ])
                }
            }
        }
    }

    post {
        success {
            script {
                echo "DEV DEPLOYMENT SUCCESS: ${env.ALL_SERVICES}"
                echo "Image tag: ${IMAGE_TAG}"
                echo "Namespace: ${K8S_NAMESPACE}"
                echo "Cluster: ${K8S_CLUSTER}"
            }
        }
        failure {
            script {
                echo "DEV DEPLOYMENT FAILED"
                echo "Services affected: ${env.ALL_SERVICES}"
                echo "Attempting rollback..."

                def services = env.ALL_SERVICES.split(',')
                services.each { service ->
                    sh "kubectl rollout undo deployment/${service} -n ${K8S_NAMESPACE} || echo 'Rollback failed for ${service}'"
                }
            }
        }
        always {
            deleteDir()
        }
    }
}
