pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '020951019497'
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        IMAGE_TAG = "${BUILD_NUMBER}"
        SERVICES = 'service-discovery,cloud-config,user-service,product-service,order-service,payment-service,shipping-service,favourite-service,api-gateway'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                }
            }
        }

        stage('Detect Changed Services') {
            steps {
                script {
                    // Get the list of changed files since last successful build
                    def changedFiles = sh(
                        script: '''
                            if git rev-parse HEAD~1 >/dev/null 2>&1; then
                                git diff --name-only HEAD~1 HEAD
                            else
                                # First commit - build all services
                                echo "user-service/
product-service/
order-service/
payment-service/
shipping-service/
favourite-service/"
                            fi
                        ''',
                        returnStdout: true
                    ).trim()

                    echo "Changed files:\n${changedFiles}"

                    // Detect which services were affected
                    def services = env.SERVICES.split(',')
                    def changedServices = []

                    services.each { service ->
                        if (changedFiles.contains("${service}/") ||
                            changedFiles.contains("pom.xml") ||
                            changedFiles.contains("infrastructure/")) {
                            changedServices.add(service)
                        }
                    }

                    // If no services detected but files changed, build all
                    if (changedServices.isEmpty() && !changedFiles.isEmpty()) {
                        changedServices = services as List
                    }

                    // If still empty, skip build
                    if (changedServices.isEmpty()) {
                        currentBuild.result = 'NOT_BUILT'
                        error('No services changed - skipping build')
                    }

                    env.CHANGED_SERVICES = changedServices.join(',')
                    echo "Services to build: ${env.CHANGED_SERVICES}"
                }
            }
        }

        stage('Build service-discovery') {
            when {
                expression { env.CHANGED_SERVICES.contains('service-discovery') }
            }
            steps {
                sh "mvn clean install -pl service-discovery -am -DskipTests"
            }
        }

        stage('Test service-discovery') {
            when {
                expression { env.CHANGED_SERVICES.contains('service-discovery') }
            }
            steps {
                sh "mvn test -pl service-discovery"
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Build cloud-config') {
            when {
                expression { env.CHANGED_SERVICES.contains('cloud-config') }
            }
            steps {
                sh "mvn clean install -pl cloud-config -am -DskipTests"
            }
        }

        stage('Test cloud-config') {
            when {
                expression { env.CHANGED_SERVICES.contains('cloud-config') }
            }
            steps {
                sh "mvn test -pl cloud-config"
            }
        }

        stage('Build user-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('user-service') }
            }
            steps {
                sh "mvn clean install -pl user-service -am -DskipTests"
            }
        }

        stage('Test user-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('user-service') }
            }
            steps {
                sh "mvn test -pl user-service"
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Build product-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('product-service') }
            }
            steps {
                sh "mvn clean install -pl product-service -am -DskipTests"
            }
        }

        stage('Test product-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('product-service') }
            }
            steps {
                sh "mvn test -pl product-service"
            }
        }

        stage('Build order-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('order-service') }
            }
            steps {
                sh "mvn clean install -pl order-service -am -DskipTests"
            }
        }

        stage('Test order-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('order-service') }
            }
            steps {
                sh "mvn test -pl order-service"
            }
        }

        stage('Build favourite-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('favourite-service') }
            }
            steps {
                sh "mvn clean install -pl favourite-service -am -DskipTests"
            }
        }

        stage('Test favourite-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('favourite-service') }
            }
            steps {
                sh "mvn test -pl favourite-service"
            }
        }

        stage('Build payment-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('payment-service') }
            }
            steps {
                sh "mvn clean install -pl payment-service -am -DskipTests"
            }
        }

        stage('Test payment-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('payment-service') }
            }
            steps {
                sh "mvn test -pl payment-service"
            }
        }

        stage('Build shipping-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('shipping-service') }
            }
            steps {
                sh "mvn clean install -pl shipping-service -am -DskipTests"
            }
        }

        stage('Test shipping-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('shipping-service') }
            }
            steps {
                sh "mvn test -pl shipping-service"
            }
        }

        stage('Build api-gateway') {
            when {
                expression { env.CHANGED_SERVICES.contains('api-gateway') }
            }
            steps {
                sh "mvn clean install -pl api-gateway -am -DskipTests"
            }
        }

        stage('Test api-gateway') {
            when {
                expression { env.CHANGED_SERVICES.contains('api-gateway') }
            }
            steps {
                sh "mvn test -pl api-gateway"
            }
        }

        stage('ECR Login') {
            steps {
                sh """
                    aws ecr get-login-password --region ${AWS_REGION} | \
                    docker login --username AWS --password-stdin ${ECR_REGISTRY}
                """
            }
        }

        stage('Docker Build service-discovery') {
            when {
                expression { env.CHANGED_SERVICES.contains('service-discovery') }
            }
            steps {
                sh """
                    docker build -t ${ECR_REGISTRY}/ecommerce/service-discovery:${IMAGE_TAG} \
                                 -t ${ECR_REGISTRY}/ecommerce/service-discovery:latest \
                                 -t ${ECR_REGISTRY}/ecommerce/service-discovery:dev \
                                 -f service-discovery/Dockerfile .
                    docker push ${ECR_REGISTRY}/ecommerce/service-discovery:${IMAGE_TAG}
                    docker push ${ECR_REGISTRY}/ecommerce/service-discovery:latest
                    docker push ${ECR_REGISTRY}/ecommerce/service-discovery:dev
                    docker rmi ${ECR_REGISTRY}/ecommerce/service-discovery:${IMAGE_TAG} || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/service-discovery:latest || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/service-discovery:dev || true
                    docker builder prune -f
                """
            }
        }

        stage('Docker Build cloud-config') {
            when {
                expression { env.CHANGED_SERVICES.contains('cloud-config') }
            }
            steps {
                sh """
                    docker build -t ${ECR_REGISTRY}/ecommerce/cloud-config:${IMAGE_TAG} \
                                 -t ${ECR_REGISTRY}/ecommerce/cloud-config:latest \
                                 -t ${ECR_REGISTRY}/ecommerce/cloud-config:dev \
                                 -f cloud-config/Dockerfile .
                    docker push ${ECR_REGISTRY}/ecommerce/cloud-config:${IMAGE_TAG}
                    docker push ${ECR_REGISTRY}/ecommerce/cloud-config:latest
                    docker push ${ECR_REGISTRY}/ecommerce/cloud-config:dev
                    docker rmi ${ECR_REGISTRY}/ecommerce/cloud-config:${IMAGE_TAG} || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/cloud-config:latest || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/cloud-config:dev || true
                    docker builder prune -f
                """
            }
        }

        stage('Docker Build user-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('user-service') }
            }
            steps {
                sh """
                    docker build -t ${ECR_REGISTRY}/ecommerce/user-service:${IMAGE_TAG} \
                                 -t ${ECR_REGISTRY}/ecommerce/user-service:latest \
                                 -t ${ECR_REGISTRY}/ecommerce/user-service:dev \
                                 -f user-service/Dockerfile .
                    docker push ${ECR_REGISTRY}/ecommerce/user-service:${IMAGE_TAG}
                    docker push ${ECR_REGISTRY}/ecommerce/user-service:latest
                    docker push ${ECR_REGISTRY}/ecommerce/user-service:dev
                    docker rmi ${ECR_REGISTRY}/ecommerce/user-service:${IMAGE_TAG} || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/user-service:latest || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/user-service:dev || true
                    docker builder prune -f
                """
            }
        }

        stage('Docker Build product-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('product-service') }
            }
            steps {
                sh """
                    docker build -t ${ECR_REGISTRY}/ecommerce/product-service:${IMAGE_TAG} \
                                 -t ${ECR_REGISTRY}/ecommerce/product-service:latest \
                                 -t ${ECR_REGISTRY}/ecommerce/product-service:dev \
                                 -f product-service/Dockerfile .
                    docker push ${ECR_REGISTRY}/ecommerce/product-service:${IMAGE_TAG}
                    docker push ${ECR_REGISTRY}/ecommerce/product-service:latest
                    docker push ${ECR_REGISTRY}/ecommerce/product-service:dev
                    docker rmi ${ECR_REGISTRY}/ecommerce/product-service:${IMAGE_TAG} || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/product-service:latest || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/product-service:dev || true
                    docker builder prune -f
                """
            }
        }

        stage('Docker Build order-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('order-service') }
            }
            steps {
                sh """
                    docker build -t ${ECR_REGISTRY}/ecommerce/order-service:${IMAGE_TAG} \
                                 -t ${ECR_REGISTRY}/ecommerce/order-service:latest \
                                 -t ${ECR_REGISTRY}/ecommerce/order-service:dev \
                                 -f order-service/Dockerfile .
                    docker push ${ECR_REGISTRY}/ecommerce/order-service:${IMAGE_TAG}
                    docker push ${ECR_REGISTRY}/ecommerce/order-service:latest
                    docker push ${ECR_REGISTRY}/ecommerce/order-service:dev
                    docker rmi ${ECR_REGISTRY}/ecommerce/order-service:${IMAGE_TAG} || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/order-service:latest || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/order-service:dev || true
                    docker builder prune -f
                """
            }
        }

        stage('Docker Build favourite-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('favourite-service') }
            }
            steps {
                sh """
                    docker build -t ${ECR_REGISTRY}/ecommerce/favourite-service:${IMAGE_TAG} \
                                 -t ${ECR_REGISTRY}/ecommerce/favourite-service:latest \
                                 -t ${ECR_REGISTRY}/ecommerce/favourite-service:dev \
                                 -f favourite-service/Dockerfile .
                    docker push ${ECR_REGISTRY}/ecommerce/favourite-service:${IMAGE_TAG}
                    docker push ${ECR_REGISTRY}/ecommerce/favourite-service:latest
                    docker push ${ECR_REGISTRY}/ecommerce/favourite-service:dev
                    docker rmi ${ECR_REGISTRY}/ecommerce/favourite-service:${IMAGE_TAG} || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/favourite-service:latest || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/favourite-service:dev || true
                    docker builder prune -f
                """
            }
        }

        stage('Docker Build payment-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('payment-service') }
            }
            steps {
                sh """
                    docker build -t ${ECR_REGISTRY}/ecommerce/payment-service:${IMAGE_TAG} \
                                 -t ${ECR_REGISTRY}/ecommerce/payment-service:latest \
                                 -t ${ECR_REGISTRY}/ecommerce/payment-service:dev \
                                 -f payment-service/Dockerfile .
                    docker push ${ECR_REGISTRY}/ecommerce/payment-service:${IMAGE_TAG}
                    docker push ${ECR_REGISTRY}/ecommerce/payment-service:latest
                    docker push ${ECR_REGISTRY}/ecommerce/payment-service:dev
                    docker rmi ${ECR_REGISTRY}/ecommerce/payment-service:${IMAGE_TAG} || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/payment-service:latest || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/payment-service:dev || true
                    docker builder prune -f
                """
            }
        }

        stage('Docker Build shipping-service') {
            when {
                expression { env.CHANGED_SERVICES.contains('shipping-service') }
            }
            steps {
                sh """
                    docker build -t ${ECR_REGISTRY}/ecommerce/shipping-service:${IMAGE_TAG} \
                                 -t ${ECR_REGISTRY}/ecommerce/shipping-service:latest \
                                 -t ${ECR_REGISTRY}/ecommerce/shipping-service:dev \
                                 -f shipping-service/Dockerfile .
                    docker push ${ECR_REGISTRY}/ecommerce/shipping-service:${IMAGE_TAG}
                    docker push ${ECR_REGISTRY}/ecommerce/shipping-service:latest
                    docker push ${ECR_REGISTRY}/ecommerce/shipping-service:dev
                    docker rmi ${ECR_REGISTRY}/ecommerce/shipping-service:${IMAGE_TAG} || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/shipping-service:latest || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/shipping-service:dev || true
                    docker builder prune -f
                """
            }
        }

        stage('Docker Build api-gateway') {
            when {
                expression { env.CHANGED_SERVICES.contains('api-gateway') }
            }
            steps {
                sh """
                    docker build -t ${ECR_REGISTRY}/ecommerce/api-gateway:${IMAGE_TAG} \
                                 -t ${ECR_REGISTRY}/ecommerce/api-gateway:latest \
                                 -t ${ECR_REGISTRY}/ecommerce/api-gateway:dev \
                                 -f api-gateway/Dockerfile .
                    docker push ${ECR_REGISTRY}/ecommerce/api-gateway:${IMAGE_TAG}
                    docker push ${ECR_REGISTRY}/ecommerce/api-gateway:latest
                    docker push ${ECR_REGISTRY}/ecommerce/api-gateway:dev
                    docker rmi ${ECR_REGISTRY}/ecommerce/api-gateway:${IMAGE_TAG} || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/api-gateway:latest || true
                    docker rmi ${ECR_REGISTRY}/ecommerce/api-gateway:dev || true
                    docker builder prune -f
                """
            }
        }
    }

    post {
        success {
            script {
                echo "BUILD SUCCESS: Built and pushed services: ${env.CHANGED_SERVICES}"
                echo "Image tag: ${IMAGE_TAG}"
            }
        }
        failure {
            script {
                echo "BUILD FAILED for one or more services in: ${env.CHANGED_SERVICES}"
            }
        }
        always {
            deleteDir()
        }
    }
}
