pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '020951019497'
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        IMAGE_TAG = "${BUILD_NUMBER}"
        SERVICES = 'user-service,product-service,order-service,payment-service,shipping-service,favourite-service'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                }
            }
        }

        stage('Detect Changed Services') {
            steps {
                script {
                    // Get the list of changed files since last successful build
                    def changedFiles = sh(
                        script: '''
                            if git rev-parse HEAD~1 >/dev/null 2>&1; then
                                git diff --name-only HEAD~1 HEAD
                            else
                                # First commit - build all services
                                echo "user-service/
product-service/
order-service/
payment-service/
shipping-service/
favourite-service/"
                            fi
                        ''',
                        returnStdout: true
                    ).trim()

                    echo "Changed files:\n${changedFiles}"

                    // Detect which services were affected
                    def services = env.SERVICES.split(',')
                    def changedServices = []

                    services.each { service ->
                        if (changedFiles.contains("${service}/") ||
                            changedFiles.contains("pom.xml") ||
                            changedFiles.contains("infrastructure/")) {
                            changedServices.add(service)
                        }
                    }

                    // If no services detected but files changed, build all
                    if (changedServices.isEmpty() && !changedFiles.isEmpty()) {
                        changedServices = services as List
                    }

                    // If still empty, skip build
                    if (changedServices.isEmpty()) {
                        currentBuild.result = 'NOT_BUILT'
                        error('No services changed - skipping build')
                    }

                    env.CHANGED_SERVICES = changedServices.join(',')
                    echo "Services to build: ${env.CHANGED_SERVICES}"
                }
            }
        }
        
        stage('Build and Test Services') {
            steps {
                script {
                    def changedServices = env.CHANGED_SERVICES.split(',')
                    def buildOrder = [
                        'user-service',
                        'product-service',
                        'order-service',
                        'favourite-service',
                        'payment-service',
                        'shipping-service'
                    ]

                    buildOrder.each { service ->
                        if (changedServices.contains(service)) {
                            stage("Build ${service}") {
                                echo "Building ${service}..."
                                sh """
                                    mvn clean install -pl ${service} -am -DskipTests
                                """
                            }
                            stage("Test ${service}") {
                                echo "Running unit tests for ${service}..."
                                sh """
                                    mvn test -pl ${service}
                                """
                            }
                        }
                    }
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Docker Build and Push') {
            steps {
                script {
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | \
                        docker login --username AWS --password-stdin ${ECR_REGISTRY}
                    """

                    def changedServices = env.CHANGED_SERVICES.split(',')
                    def buildOrder = [
                        'user-service',
                        'product-service',
                        'order-service',
                        'favourite-service',
                        'payment-service',
                        'shipping-service'
                    ]

                    buildOrder.each { service ->
                        if (changedServices.contains(service)) {
                            stage("Build Image ${service}") {
                                echo "Building Docker image for ${service}..."
                                sh """
                                    docker build -t ${ECR_REGISTRY}/ecommerce/${service}:${IMAGE_TAG} \
                                                 -t ${ECR_REGISTRY}/ecommerce/${service}:latest \
                                                 -t ${ECR_REGISTRY}/ecommerce/${service}:dev \
                                                 -f ${service}/Dockerfile .
                                """
                            }
                            stage("Push ${service}") {
                                echo "Pushing ${service} to ECR..."
                                sh """
                                    docker push ${ECR_REGISTRY}/ecommerce/${service}:${IMAGE_TAG}
                                    docker push ${ECR_REGISTRY}/ecommerce/${service}:latest
                                    docker push ${ECR_REGISTRY}/ecommerce/${service}:dev
                                """
                            }
                            stage("Clean ${service} Image") {
                                echo "Cleaning local image for ${service}..."
                                sh """
                                    docker rmi ${ECR_REGISTRY}/ecommerce/${service}:${IMAGE_TAG} || true
                                    docker rmi ${ECR_REGISTRY}/ecommerce/${service}:latest || true
                                    docker rmi ${ECR_REGISTRY}/ecommerce/${service}:dev || true
                                    docker builder prune -f
                                """
                            }
                        }
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                echo "BUILD SUCCESS: Built and pushed services: ${env.CHANGED_SERVICES}"
                echo "Image tag: ${IMAGE_TAG}"
            }
        }
        failure {
            script {
                echo "BUILD FAILED for one or more services in: ${env.CHANGED_SERVICES}"
            }
        }
        always {
            deleteDir()
        }
    }
}
