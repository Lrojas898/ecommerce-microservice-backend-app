pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-2'
        TF_IN_AUTOMATION = 'true'
        TF_INPUT = 'false'
        TF_CLI_ARGS = '-no-color'
    }

    stages {
        stage('Configure AWS Credentials') {
            steps {
                withAWS(credentials: 'aws-credentials-ecr', region: env.AWS_REGION) {
                    sh 'aws sts get-caller-identity'
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
                echo "Checked out branch: ${env.BRANCH_NAME}"
            }
        }

        stage('Terraform Init') {
            steps {
                withAWS(credentials: 'aws-credentials-ecr', region: env.AWS_REGION) {
                    dir('infrastructure/terraform') {
                        sh '''
                            echo "Initializing Terraform..."
                            terraform init -upgrade
                        '''
                    }
                }
            }
        }

        stage('Terraform Format') {
            steps {
                withAWS(credentials: 'aws-credentials-ecr', region: env.AWS_REGION) {
                    dir('infrastructure/terraform') {
                        sh '''
                            echo "Formatting Terraform files..."
                            terraform fmt -recursive
                        '''
                    }
                }
            }
        }

        stage('Terraform Validate') {
            steps {
                withAWS(credentials: 'aws-credentials-ecr', region: env.AWS_REGION) {
                    dir('infrastructure/terraform') {
                        sh '''
                            echo "Validating Terraform configuration..."
                            terraform validate
                        '''
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                withAWS(credentials: 'aws-credentials-ecr', region: env.AWS_REGION) {
                    dir('infrastructure/terraform') {
                        sh '''
                            echo "Running Terraform plan..."
                            terraform plan -out=tfplan
                        '''
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withAWS(credentials: 'aws-credentials-ecr', region: env.AWS_REGION) {
                    script {
                        dir('infrastructure/terraform') {
                            input message: 'Do you want to apply this Terraform plan?', ok: 'Apply'
                            sh 'terraform apply -auto-approve tfplan'
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Terraform pipeline completed successfully!"
        }
        failure {
            echo "Terraform pipeline failed!"
        }
        always {
            dir('infrastructure/terraform') {
                sh 'rm -f tfplan || true'
            }
        }
    }
}
