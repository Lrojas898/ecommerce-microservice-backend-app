pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '020951019497'
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        K8S_NAMESPACE = 'production'
        SERVICES = 'user-service,product-service,order-service,payment-service,shipping-service,favourite-service'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                }
            }
        }

        stage('Detect Changed Services') {
            steps {
                script {
                    def changedFiles = sh(
                        script: '''
                            if git rev-parse HEAD~1 >/dev/null 2>&1; then
                                git diff --name-only HEAD~1 HEAD
                            else
                                echo "user-service/
product-service/
order-service/
payment-service/
shipping-service/
favourite-service/"
                            fi
                        ''',
                        returnStdout: true
                    ).trim()

                    echo "Changed files:\n${changedFiles}"

                    def services = env.SERVICES.split(',')
                    def changedServices = []

                    services.each { service ->
                        if (changedFiles.contains("${service}/") ||
                            changedFiles.contains("pom.xml") ||
                            changedFiles.contains("infrastructure/")) {
                            changedServices.add(service)
                        }
                    }

                    if (changedServices.isEmpty() && !changedFiles.isEmpty()) {
                        changedServices = services as List
                    }

                    if (changedServices.isEmpty()) {
                        currentBuild.result = 'NOT_BUILT'
                        error('No services changed - skipping build')
                    }

                    env.CHANGED_SERVICES = changedServices.join(',')
                    echo "Services to build and deploy: ${env.CHANGED_SERVICES}"

                    // Auto-generate version based on date and build number
                    env.VERSION = sh(
                        script: "date '+%Y.%m.%d'",
                        returnStdout: true
                    ).trim() + ".${BUILD_NUMBER}"

                    echo "Auto-generated version: ${env.VERSION}"
                }
            }
        }
        
        stage('Build and Test Services') {
            steps {
                script {
                    def changedServices = env.CHANGED_SERVICES.split(',')
                    def buildStages = [:]

                    changedServices.each { service ->
                        buildStages["Build ${service}"] = {
                            stage("Build ${service}") {
                                echo "Building ${service}..."
                                sh """
                                    mvn clean install -pl ${service} -am
                                """
                            }
                            stage("Unit Tests ${service}") {
                                echo "Running unit tests for ${service}..."
                                sh """
                                    mvn test -pl ${service}
                                """
                            }
                            stage("Integration Tests ${service}") {
                                echo "Running integration tests for ${service}..."
                                sh """
                                    mvn verify -pl ${service} -Pintegration-tests || echo "No integration tests profile"
                                """
                            }
                        }
                    }

                    parallel buildStages
                }
            }
            post {
                always {
                    junit '**/target/*-reports/*.xml'
                }
            }
        }

        stage('Docker Build and Push') {
            steps {
                script {
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | \
                        docker login --username AWS --password-stdin ${ECR_REGISTRY}
                    """

                    def changedServices = env.CHANGED_SERVICES.split(',')
                    def dockerStages = [:]

                    changedServices.each { service ->
                        dockerStages["Docker ${service}"] = {
                            def imageTag = "v${env.VERSION}-${env.GIT_COMMIT_SHORT}"

                            stage("Build Image ${service}") {
                                echo "Building Docker image for ${service}..."
                                sh """
                                    docker build -t ${ECR_REGISTRY}/ecommerce/${service}:${imageTag} \
                                                 -t ${ECR_REGISTRY}/ecommerce/${service}:v${env.VERSION} \
                                                 -t ${ECR_REGISTRY}/ecommerce/${service}:production \
                                                 -f ${service}/Dockerfile .
                                """
                            }
                            stage("Push ${service}") {
                                echo "Pushing ${service} to ECR..."
                                sh """
                                    docker push ${ECR_REGISTRY}/ecommerce/${service}:${imageTag}
                                    docker push ${ECR_REGISTRY}/ecommerce/${service}:v${env.VERSION}
                                    docker push ${ECR_REGISTRY}/ecommerce/${service}:production
                                """
                            }
                        }
                    }

                    parallel dockerStages
                }
            }
        }
        
        stage('Generate Release Notes') {
            steps {
                script {
                    def changedServices = env.CHANGED_SERVICES.split(',')

                    // Generate master release notes
                    sh """
                        cat > RELEASE_NOTES_v${VERSION}.md << 'NOTES'
# Production Release Notes - v${VERSION}

**Release Date:** \$(date '+%Y-%m-%d %H:%M:%S')
**Build:** #${BUILD_NUMBER}
**Commit:** ${GIT_COMMIT_SHORT}
**Services Updated:** ${CHANGED_SERVICES}

## Services Deployed

NOTES
                    """

                    // Generate release notes for each service
                    changedServices.each { service ->
                        def imageTag = "v${env.VERSION}-${env.GIT_COMMIT_SHORT}"
                        sh """
                            cat >> RELEASE_NOTES_v${VERSION}.md << 'NOTES'

### ${service}

**Docker Image:** ${ECR_REGISTRY}/ecommerce/${service}:${imageTag}

**Changes:**
\$(git log --pretty=format:"- %s (%an)" HEAD~5..HEAD -- ${service}/ | head -20 || echo "- Initial release")

NOTES
                        """
                    }

                    // Add common sections
                    sh """
                        cat >> RELEASE_NOTES_v${VERSION}.md << 'NOTES'

## Test Results

- Unit Tests: PASSED
- Integration Tests: PASSED

## Deployment

- **Environment:** Production
- **Namespace:** ${K8S_NAMESPACE}
- **Replicas:** 2

## Rollback Commands

NOTES
                    """

                    changedServices.each { service ->
                        sh """
                            cat >> RELEASE_NOTES_v${VERSION}.md << 'NOTES'
\`\`\`bash
# Rollback ${service}
kubectl rollout undo deployment/${service} -n ${K8S_NAMESPACE}
\`\`\`

NOTES
                        """
                    }

                    sh """
                        cat >> RELEASE_NOTES_v${VERSION}.md << 'NOTES'

---
*Generated automatically by Jenkins Pipeline*
NOTES

                        cat RELEASE_NOTES_v${VERSION}.md
                    """
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: "RELEASE_NOTES_*.md", fingerprint: true
                }
            }
        }
        
        stage('Manual Approval') {
            steps {
                script {
                    def releaseNotes = readFile("RELEASE_NOTES_v${VERSION}.md")

                    timeout(time: 30, unit: 'MINUTES') {
                        input message: """
                        Deploy v${VERSION} to PRODUCTION?

                        Services: ${CHANGED_SERVICES}

                        Review the release notes and confirm deployment.
                        """,
                        parameters: [
                            text(name: 'APPROVAL_NOTES', defaultValue: '', description: 'Add any notes about this deployment')
                        ]
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    def changedServices = env.CHANGED_SERVICES.split(',')
                    def imageTag = "v${env.VERSION}-${env.GIT_COMMIT_SHORT}"
                    def deploymentOrder = [
                        'service-discovery',
                        'cloud-config',
                        'user-service',
                        'product-service',
                        'order-service',
                        'favourite-service',
                        'payment-service',
                        'shipping-service',
                        'api-gateway'
                    ]

                    deploymentOrder.each { service ->
                        if (changedServices.contains(service)) {
                            echo "Deploying ${service} to production..."
                            sh """
                                kubectl set image deployment/${service} \
                                    ${service}=${ECR_REGISTRY}/ecommerce/${service}:${imageTag} \
                                    -n ${K8S_NAMESPACE} || echo "Deployment ${service} not found - skipping"

                                kubectl rollout status deployment/${service} -n ${K8S_NAMESPACE} --timeout=5m || echo "Rollout status check failed"
                            """

                            if (service == 'service-discovery' || service == 'cloud-config') {
                                echo "Waiting for ${service} to be ready..."
                                sleep 10
                            }
                        }
                    }
                }
            }
        }

        stage('Smoke Tests') {
            steps {
                script {
                    def changedServices = env.CHANGED_SERVICES.split(',')

                    changedServices.each { service ->
                        echo "Running smoke tests for ${service}..."
                        sh """
                            SERVICE_URL=\$(kubectl get svc ${service} -n ${K8S_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || echo "localhost:8080")

                            curl -f http://\${SERVICE_URL}/actuator/health || echo "Health check failed for ${service}"
                            echo "Smoke tests passed for ${service}"
                        """
                    }
                }
            }
        }

        stage('Tag Git Release') {
            steps {
                script {
                    sh """
                        git tag -a v${VERSION} -m "Release v${VERSION} - Services: ${CHANGED_SERVICES}"
                        git push origin v${VERSION} || echo "Tag already exists"
                    """
                }
            }
        }

        stage('Clean Local Images') {
            steps {
                script {
                    def changedServices = env.CHANGED_SERVICES.split(',')
                    def imageTag = "v${env.VERSION}-${env.GIT_COMMIT_SHORT}"

                    changedServices.each { service ->
                        sh """
                            docker rmi ${ECR_REGISTRY}/ecommerce/${service}:${imageTag} || true
                            docker rmi ${ECR_REGISTRY}/ecommerce/${service}:v${VERSION} || true
                            docker rmi ${ECR_REGISTRY}/ecommerce/${service}:production || true
                        """
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                echo """
                ===============================================================
                PRODUCTION DEPLOYMENT SUCCESS
                ===============================================================

                Version: v${VERSION}
                Services: ${CHANGED_SERVICES}
                Commit: ${GIT_COMMIT_SHORT}
                Namespace: ${K8S_NAMESPACE}

                Release Notes: RELEASE_NOTES_v${VERSION}.md

                ===============================================================
                """
            }
        }
        failure {
            script {
                echo "PRODUCTION DEPLOYMENT FAILED: v${VERSION}"
                echo "Services affected: ${CHANGED_SERVICES}"
                echo "Automatic rollback triggered..."

                def changedServices = env.CHANGED_SERVICES.split(',')
                changedServices.each { service ->
                    sh """
                        kubectl rollout undo deployment/${service} -n ${K8S_NAMESPACE} || echo "Rollback failed for ${service}"
                    """
                }
            }
        }
        always {
            deleteDir()
        }
    }
}
